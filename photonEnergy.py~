#Import the usual suspects
import sys, argparse
import numpy as np
import ROOT as rt
from helpers.larflowreco_ana_funcs import getCosThetaGravVector

#Import some functions of our own
from cuts import trueSignalFinder

parser = argparse.ArgumentParser("Make energy histograms from a bnb nu overlay ntuple file")
parser.add_argument("-i", "--infile", type=str, required=True, help="input ntuple file")
parser.add_argument("-o", "--outfile", type=str, default="example_ntuple_analysis_script_output.root", help="output root file name")
parser.add_argument("-fc", "--fullyContained", action="store_true", help="only consider fully contained events")
parser.add_argument("-ncc", "--noCosmicCuts", action="store_true", help="don't apply cosmic rejection cuts")
args = parser.parse_args()

#needed for proper scaling of error bars:
#rt.TH1.SetDefaultSumw2(rt.kTRUE)

#open input file and get event and POT trees
ntuple_file = rt.TFile(args.infile)
eventTree = ntuple_file.Get("EventTree")
potTree = ntuple_file.Get("potTree")

#we will scale histograms to expected event counts from POT in runs 1-3: 6.67e+20
targetPOT = 6.67e+20
targetPOTstring = "6.67e+20"

#calculate POT represented by full ntuple file after applying cross section weights
ntuplePOTsum = 0.
for i in range(potTree.GetEntries()):
  potTree.GetEntry(i)
  ntuplePOTsum = ntuplePOTsum + potTree.totGoodPOT

#define histograms to fill
#we will write histograms to output file for:
protonHist = rt.TH1F("threePhotonBackgroundHist", "Proton Energies", 60, 0, 1000)
pionHist = rt.TH1F("threePhotonBackgroundHist", "Charged Pion Energies", 60, 0, 1000)


#set histogram axis titles and increase line width
def configureHist(h):
  h.GetYaxis().SetTitle("events per "+targetPOTstring+" POT")
  h.GetXaxis().SetTitle("energy (GeV")
  h.SetLineWidth(2)
  return h

#Scale the histograms
protonHist = configureHist(protonHist)
pionHist = configureHist(pionHist)


#Set variables for program review
SantaReal = True


#Now we loop through the events to form the histogram!
for i in range(eventTree.GetEntries()):

  eventTree.GetEntry(i)

  for x in range(eventTree.nTracks):
    if eventTree.trackClassified[x] == 1:
      if eventTree.trackPID[x] == 2212:
        protonHist.Fill(eventTree.trackRecoE[x], eventTree.xsecWeight)

      if eventTree.trackPID[x] == 211:
        pionHist.Fill(eventTree.trackRecoE[x], eventTree.xsecWeight)
  
protonHist.Scale(targetPOT/ntuplePOTsum)
pionHist.Scale(targetPOT/ntuplePOTsum)  

outFile = rt.TFile(args.outfile, "RECREATE")
protonHist.Write()    
pionHist.Write()
      
