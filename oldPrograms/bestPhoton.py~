import sys, argparse
import numpy as np
import ROOT as rt
rt.PyConfig.IgnoreCommandLineOptions = True
rt.gROOT.SetBatch(True)

from cuts import trueCutNC, trueCutFiducials, trueCutCosmic, truePhotonList, trueCutPionProton, histStack, recoNoVertex, recoFiducials, recoPhotonList, recoPionProton, recoNeutralCurrent, scaleTrueEnergy

from helpers.larflowreco_ana_funcs import getCosThetaGravVector

parser = argparse.ArgumentParser("Make energy histograms from a bnb nu overlay ntuple file")
parser.add_argument("-i", "--infile", type=str, required=True, help="input ntuple file")
parser.add_argument("-o", "--outfile", type=str, default="example_ntuple_analysis_script_output.root", help="output root file name")
parser.add_argument("-fc", "--fullyContained", action="store_true", help="only consider fully contained events")
parser.add_argument("-ncc", "--noCosmicCuts", action="store_true", help="don't apply cosmic rejection cuts")
args = parser.parse_args()

#needed for proper scaling of error bars:
#rt.TH1.SetDefaultSumw2(rt.kTRUE)

#open input file and get event and POT trees
ntuple_file = rt.TFile(args.infile)
eventTree = ntuple_file.Get("EventTree")
potTree = ntuple_file.Get("potTree")

#we will scale histograms to expected event counts from POT in runs 1-3: 6.67e+20
targetPOT = 6.67e+20
targetPOTstring = "6.67e+20"

#calculate POT represented by full ntuple file after applying cross section weights
ntuplePOTsum = 0.
for i in range(potTree.GetEntries()):
  potTree.GetEntry(i)
  ntuplePOTsum = ntuplePOTsum + potTree.totGoodPOT


#Variables for program function
truePhotonIDs = []
fiducialData = {"xMin":0, "xMax":256, "yMin":-116.5, "yMax":116.5, "zMin":0, "zMax":1036, "width":10} 
bestPhotonEnergy = 0
bestPhotonEvent = 0

#Event loop begins
for i in range(eventTree.GetEntries()):
  eventTree.GetEntry(i)

  #Iterate with truth variables
#  if trueCutNC(eventTree) == False:
#    continue

#  if trueCutFiducials(eventTree, fiducialData) == False:
#    continue
    
#  if trueCutCosmic(eventTree) == False:
#    continue
    
#  if trueCutPionProton(eventTree) == False:
#    continue
  
  truePhotonIDs = truePhotonList(eventTree, truePhotonIDs, fiducialData)
  if len(truePhotonIDs) ==  0:
    continue

  leadingPhoton = scaleTrueEnergy(eventTree, truePhotonIDs)
  if leadingPhoton > bestPhotonEnergy:
    bestPhotonEnergy = leadingPhoton
    bestPhotonEvent = i

print("The best photon of them all is in event", bestPhotonEvent, "and has an energy of", bestPhotonEnergy, "GeV")
